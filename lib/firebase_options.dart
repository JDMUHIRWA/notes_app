// Firebase configuration file - Auto-generated by FlutterFire CLI
// This file contains platform-specific Firebase configuration options
//
// IMPORTANT: This file is automatically generated and should not be manually edited.
// To update Firebase configuration, use the FlutterFire CLI:
// - Run: flutterfire configure
// - This will regenerate this file with updated configuration

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// This class provides platform-specific Firebase configuration options
/// and automatically selects the appropriate configuration based on the
/// current platform (Android, iOS, web, etc.).
///
/// Example usage:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  /// Gets the appropriate Firebase configuration for the current platform
  ///
  /// This getter automatically detects the current platform and returns
  /// the corresponding Firebase configuration options.
  ///
  /// Throws [UnsupportedError] if the current platform is not supported
  /// or if Firebase has not been configured for the current platform.
  static FirebaseOptions get currentPlatform {
    // Check if running on web platform
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    // Switch based on the target platform
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android; // Return Android-specific configuration
      case TargetPlatform.iOS:
        return ios; // Return iOS-specific configuration
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// Firebase configuration options for Android platform
  ///
  /// Contains all necessary API keys, project IDs, and other configuration
  /// values required for Firebase services on Android devices.
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyASFY352dvUBBSqCawUtevYswJSV-fPXtU',
    appId: '1:313153226798:android:9f91eb645db978ecf337bf',
    messagingSenderId: '313153226798',
    projectId: 'notes-6fbd8',
    storageBucket: 'notes-6fbd8.firebasestorage.app',
  );

  /// Firebase configuration options for iOS platform
  ///
  /// Contains all necessary API keys, project IDs, bundle ID, and other
  /// configuration values required for Firebase services on iOS devices.
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyAUGtvtkV6LaRu4gRslhhzjzzvjg2MIJS0',
    appId: '1:313153226798:ios:6406752200466cb0f337bf',
    messagingSenderId: '313153226798',
    projectId: 'notes-6fbd8',
    storageBucket: 'notes-6fbd8.firebasestorage.app',
    iosBundleId: 'com.example.notesApp',
  );
}
